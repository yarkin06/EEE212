ORG 0
	MOV R3, #0h ;# OF NUMBERS
	MOV R0, #30h
	acall CONFIGURE_LCD
KEYBOARD_LOOP:
	acall keyboard
	acall send_data
	CJNE A, #'A', CHECK_IF_B
	AJMP EVALUATE_A
CHECK_IF_B:
	CJNE A, #'B', CHECK_IF_NOT
	AJMP EVALUATE_B
CHECK_IF_NOT:
	CJNE A, #'#', ENTER
	ACALL IN0LOOP
	acall configure_lcd
	INC R3
	acall NUMBER_WRITING
	SJMP KEYBOARD_LOOP
ENTER:	SUBB A, #30H ; WE LOAD THE NUMS STARTING FROM 30H
	MOV R4, A
	MOV A, @R0
	MOV B, #10
	MUL AB
	ADD A, R4
	MOV R5, A
	MOV A, B
	ADDC A, #0h
	MOV R6, A
	INC R0
	MOV A, @R0
	MOV B, #10
	MUL AB
	ADD A, R6
	MOV @R0, A
	DEC R0
	MOV A, R5
	MOV @R0, A
	SJMP KEYBOARD_LOOP


NUMBER_WRITING:
	MOV 21H,R3
	MOV 23H,R3
	MOV 22H,#9
	MOV a,#0CEh
	acall send_command
BIGORNOT:
	DEC 21H
	MOV A,21H
	CJNE A, #0, BIGGER
	SJMP WRITE_SKIP
BIGGER:
	DJNZ 22H, BIGORNOT
	MOV A, #'1'
	Acall send_data
	MOV A, R3
	SUBB A,#10
	MOV R2, A
WRITE_SKIP:
	MOV A, R3
	ORL A, #30h ;ASCII CONVERSION
	acall send_data
	mov A, #080h
	acall send_command
	MOV R3,23H
	RET


EVALUATE_A:
	ACALL SORT_NUMBERS
	MOV A, R3
	JB ACC.0, AMOUNT_IS_ODD ; WHEN EVEN WE WİLL TAKE THE HALF OF SUM
	ADD A, #30h
	MOV R0, A ; FIRST NUMS LSB
	INC A
	MOV R1, A  ;FIRST NUMS MSB
	MOV A, @R0
	MOV 10H, A
	ACALL D0LOOP
	MOV A, @R0
	ADD A, 10H ;1ST+2ND NUM LSB OVER 2
	MOV R6, A
	MOV A, @R1
	MOV 11H, A
	ACALL D1LOOP
	MOV A, @R1
	ADDC A, 11H ;1ST+2ND NUM MSB OVER 2
	RRC A
	MOV R7, A
	MOV A, R6
	RRC A
	MOV R6, A ;NUM IS R7R6.K WHERE K İS EITHER 0 OR 5 WRT C
	acall RESULT_PART_A
	SJMP STOP

D0LOOP:	DEC R0
	DEC R0
	RET
D1LOOP:	DEC R1
	DEC R1
	RET
AMOUNT_IS_ODD:
	MOV A,#30H
	ADD A, R3
	MOV R1, A
	DEC A
	MOV R0, A
	MOV A, @R1
	MOV R7, A
	MOV A, @R0
	MOV R6, A
	CLR C ;NUM IS R7R6
	ACALL RESULT_PART_A
STOP:	SJMP STOP


SORT_NUMBERS:
	MOV 10H, R0
	MOV 11H, R1
	MOV 12H, R5
	MOV 13H, R6
	MOV A, R3
	MOV R5, A
CONTINUE:
	DJNZ R5, SORT_SKIP_1
	MOV R6,13H
	MOV R5,12H
	MOV R1,11H
	MOV R0,10H
	RET
SORT_SKIP_1:
	MOV A, R5
	MOV R6, A
	MOV R0, #31h
	MOV R1, #33h
SORT_BACK_1:
	MOV A, @R1
	MOV B, @R0
	CJNE A, B, SORT_SKIP_2
	ACALL DECLOOP
	MOV A, @R1
	MOV B, @R0
	CJNE A, B, SORT_SKIP_3
SORT_SKIP_2:
	ACALL DECLOOP
SORT_SKIP_3:
	JC SORT_SKIP_4
	MOV A, @R1
	XCH A, @R0
	MOV @R1, A
	ACALL INCLOOP
	MOV A, @R1
	XCH A, @R0
	MOV @R1, A
	SJMP SORT_SKIP_5
SORT_SKIP_4:
	ACALL INCLOOP
SORT_SKIP_5:
	ACALL INCLOOP
	ACALL INCLOOP
	DJNZ R6, SORT_BACK_1
	SJMP CONTINUE
INCLOOP:INC R0
	INC R1
	RET
DECLOOP:DEC R0
	DEC R1
	RET

RESULT_PART_A:
	MOV 10h, C
	MOV 11H, R3
	MOV 12H, R2
	MOV 13H, R1
	MOV 14H, R0
	MOV R3, #30h
	MOV R2, #30h
	MOV R1, #30h
	MOV R0, #30h
RESULT_A_BACK:
	CJNE R6, #0h, RESULT_A_SKIP_2
	CJNE R7, #0h, RESULT_A_SKIP_1
	ACALL CONFIGURE_LCD
	CJNE R3, #'0', WRITE_R3_A
	CJNE R2, #'0', WRITE_R2_A
	CJNE R1, #'0', WRITE_R1_A
	SJMP WRITE_R0_A
WRITE_R3_A:
	MOV A, R3
	acall SEND_DATA
WRITE_R2_A:
	MOV A, R2
	ACall SEND_DATA
WRITE_R1_A:
	MOV A, R1
	ACALL send_data
WRITE_R0_A:
	MOV A, R0
	ACALL SEND_DATA
	MOV A, #'.'
	ACALL SEND_DATA
	MOV A, #30h
	MOV C, 10h
	MOV ACC.0, C
	MOV ACC.2, C
	ACALL SEND_DATA
	MOV R3, 11H
	MOV R2, 12H
	MOV R1, 13H
	MOV R0, 14H
	RET
RESULT_A_SKIP_1:
	DEC R7
	MOV R6, #0FFh
	SJMP RESULT_A_SKIP_3
RESULT_A_SKIP_2:
	DEC R6
RESULT_A_SKIP_3:
	INC R0
	CJNE R0, #3Ah, RESULT_A_BACK
	MOV R0, #30h
	INC R1
	CJNE R1, #3Ah, RESULT_A_BACK
	MOV R1, #30h
	INC R2
	CJNE R2, #3Ah, RESULT_A_BACK
	MOV R2, #30h
	INC R3
	SJMP RESULT_A_BACK


EVALUATE_B:
	ACALL FINDING_MEAN ;SUM AND DIVIDE
	ACALL ROUND_MEAN ;ROUNDING MEAN
	ACALL RESULT_PART_B_1 ;RESULT OF MEAN
	ACALL AMD ;ABSOLUTE MEAN DEVIATION
	ACALL FINDING_MEAN ;SUM AND DIVIDE
	MOV B, #10
	MOV A, R5
	MUL AB
	MOV B, R3
	DIV AB
	MOV 70h, A ;FP
	MOV 71h, B ;REMAINDER
	ACALL ROUND_AMD ;ROUNDING AMD
	ACALL RESULT_PART_B_2 ;RESULT OF AMD

STOP1: SJMP STOP1


RESULT_PART_B_1:
	MOV 10H, R5
	MOV 11H, R4
	MOV 12H, R3
	MOV 13H, R2
	MOV A, R0
	MOV R6, A
	MOV A, R1
	MOV R7, A
	MOV R5, #30h
	MOV R4, #30h
	MOV R3, #30h
	MOV R2, #30h
RESULT_B1_BACK:
	CJNE R0, #0h, RESULT_B1_SKIP_2
	CJNE R1, #0h, RESULT_B1_SKIP_1
	ACALL CONFIGURE_LCD
	MOV A, #0C0h
	ACALL SEND_COMMAND
	CJNE R5, #'0', WRITE_R5_B1
	CJNE R4, #'0', WRITE_R4_B1
	CJNE R3, #'0', WRITE_R3_B1
	SJMP WRITE_R2_B1
WRITE_R5_B1:
	MOV A, R5
	acall SEND_DATA
WRITE_R4_B1:
	MOV A, R4
	ACall SEND_DATA
WRITE_R3_B1:
	MOV A, R3
	ACALL send_data
WRITE_R2_B1:
	MOV A, R2
	ACALL SEND_DATA
	MOV R2,13H
	MOV R3,12H
	MOV R4,11H
	MOV R5,10H
	RET

RESULT_B1_SKIP_1:
	DEC R1
	MOV R0, #0FFh
	SJMP RESULT_B1_SKIP_3
RESULT_B1_SKIP_2:
	DEC R0
RESULT_B1_SKIP_3:
	INC R2
	CJNE R2, #3Ah, RESULT_B1_BACK
	MOV R2, #30h
	INC R3
	CJNE R3, #3Ah, RESULT_B1_BACK
	MOV R3, #30h
	INC R4
	CJNE R4, #3Ah, RESULT_B1_BACK
	MOV R4, #30h
	INC R5
	SJMP RESULT_B1_BACK


RESULT_PART_B_2:
	MOV 10H, R5
	MOV 11H, R4
	MOV 12H, R3
	MOV 13H, R2
	MOV A, R0
	MOV R6, A
	MOV A, R1
	MOV R7, A
	MOV R5, #30h
	MOV R4, #30h
	MOV R3, #30h
	MOV R2, #30h
RESULT_B2_BACK:
	CJNE R0, #0h, RESULT_B2_SKIP_2
	CJNE R1, #0h, RESULT_B2_SKIP_1
	MOV A, #0CAh
	ACALL SEND_COMMAND
	CJNE R5, #'0', WRITE_R5_B2
	CJNE R4, #'0', WRITE_R4_B2
	CJNE R3, #'0', WRITE_R3_B2
	SJMP WRITE_R2_B2
WRITE_R5_B2:
	MOV A, R5
	acall SEND_DATA
WRITE_R4_B2:
	MOV A, R4
	ACall SEND_DATA
WRITE_R3_B2:
	MOV A, R3
	ACALL send_data
WRITE_R2_B2:
	MOV A, R2
	ACALL SEND_DATA
	MOV A, #'.'
	ACALL SEND_DATA
	MOV A, 70h
	ORL A, #30h
	ACALL SEND_DATA
	MOV R5, 10H
	MOV R4, 11H
	MOV R3, 12H
	MOV R2, 13H
	RET
RESULT_B2_SKIP_1:
	DEC R1
	MOV R0, #0FFh
	SJMP RESULT_B2_SKIP_3
RESULT_B2_SKIP_2:
	DEC R0
RESULT_B2_SKIP_3:
	INC R2
	CJNE R2, #3Ah, RESULT_B2_BACK
	MOV R2, #30h
	INC R3
	CJNE R3, #3Ah, RESULT_B2_BACK
	MOV R3, #30h
	INC R4
	CJNE R4, #3Ah, RESULT_B2_BACK
	MOV R4, #30h
	INC R5
	SJMP RESULT_B2_BACK


ROUND_MEAN:
	MOV A,R3
	RRC A
	JC ODDROUND
	JNC EVENROUND
ODDROUND:
	MOV A, R3
	MOV B,#2
	DIV AB
	MOV 10H,A
	MOV A,R5
	CJNE A,10H,BUYUKKUCUK
	SJMP KUCUK
EVENROUND:
	MOV A, R3
	MOV B,#2
	DIV AB
	MOV 10H,A
	MOV A,R5
	CJNE A,10H,BUYUKKUCUK
	SJMP BUYUK
BUYUKKUCUK:
	JC KUCUK
BUYUK:	MOV A, R0
	ADD A, #1
	MOV R0, A
	MOV A, R1
	ADDC A, #0h
	MOV R1, A
	SJMP KUCUK
KUCUK: RET


FINDING_MEAN:
	MOV 20H,R3
	MOV 21H,R3
	MOV A,#0
	MOV R5, A
	MOV R6, A
	MOV R7, A
	MOV R0, #30h
	MOV R1, #31H
BACK_MEAN_1:
	ADDC A, @R0
	JNC SKIP_MEAN_1
	CLR C
	INC R6
SKIP_MEAN_1:
	ACALL IN0LOOP
	DJNZ 20H, BACK_MEAN_1
	MOV R5, A
	MOV A, #0
	CLR C
BACK_MEAN_2:
	ADDC A, @R1
	JNC SKIP_MEAN_2
	CLR C
	INC R7
SKIP_MEAN_2:
	ACALL IN1LOOP
	DJNZ 21H, BACK_MEAN_2
	ADD A, R6
	MOV R6, A
	MOV A,#0
	ADDC A, R7
	MOV R7,A ; NOW WE HAVE R7R6R5
	MOV 10H, R2
	MOV 11H, R4
	MOV A, #0 ;KEEPING TRACK
	MOV B,A
	MOV R0,A
	MOV R1, A
	MOV R2, A
	MOV R4,A
DIVISION_FIRST:
 	MOV A,R3
  	RLC A
  	MOV R3,A
  	MOV A,R2
  	RLC A
  	MOV R2,A
  	INC B
  	MOV A, R4
  	RLC A
  	MOV R4, A
  	JNC DIVISION_FIRST


DIVISION_SECOND:
	MOV A, R4
	RRC A
	MOV R4, A
	MOV A,R2
	RRC A
	MOV R2,A
	MOV A,R3
	RRC A
	MOV R3,A
	CLR C
	MOV 20h,R7
	MOV 21h,R6
	MOV 22h,R5
	MOV A,R5
	SUBB A,R3
	MOV R5,A
	MOV A,R6
	SUBB A,R2
	MOV R6,A
	MOV A,R7
	SUBB A,R4
	MOV R7,A
	JNC DIVISION_THIRD
	MOV R7,20h
	MOV R6,21h
	MOV R5,22h

DIVISION_THIRD:
	MOV A,R0
	CPL C
	RLC A
	MOV R0,A
	MOV A,R1
	RLC A
	MOV R1,A
	DJNZ B,DIVISION_SECOND

	MOV R4,11h
	MOV R2,10h
	RET

IN0LOOP:INC R0
	INC R0
	RET
IN1LOOP:INC R1
	INC R1
	RET

AMD:	MOV 12H, R0
	MOV 13H,R1
	MOV R0, #30h
	MOV R1, #30h
	MOV 10H, R3

ABSOLUTE_CALCULATION:
	MOV A, R6
	SUBB A, @R0
	MOV 65H, A
	MOV A, R7
	INC R0
	SUBB A, @R0
	MOV 66H, A
	JC TWOSCOMP
	SJMP ABSRESULT
TWOSCOMP:
	MOV A, 65H
	CPL A
	ADD A ,#1
	MOV 65H, A
	MOV A, 66H
	CPL A
	ADDC A, #0H
	MOV 66H, A
ABSRESULT:
	MOV @R1, 65H
	INC R1
	MOV @R1, 66H
	INC R1
	INC R0
	DJNZ 10H, ABSOLUTE_CALCULATION
	MOV R0,12H
	MOV R1, 13H
	RET


ROUND_AMD:
	MOV A,R2
	RRC A
	JC ODDAMD
	JNC EVENAMD
ODDAMD:	MOV A, R2
	MOV B,#2
	DIV AB
	MOV 10H,A
	MOV A,71h
	CJNE A,10H,BUYUKKUCUKAMD
EVENAMD:
	MOV A, R2
	MOV B,#2
	DIV AB
	MOV 10H,A
	MOV A,71H
	CJNE A,10H,BUYUKKUCUKAMD
	SJMP BUYUKAMD
BUYUKKUCUKAMD:
	JC KUCUKAMD
BUYUKAMD:
	MOV A, 70H
	ADDC A, #0
	MOV 70H, A
	MOV A, R0
	ADDC A, #0
	MOV R0, A
	MOV A, R1
	ADDC A, #0
	MOV R1, A
	SJMP KUCUKAMD
KUCUKAMD: RET


CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret




SEND_COMMAND:
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA:
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ;takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'

END
