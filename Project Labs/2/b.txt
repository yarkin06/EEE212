ORG 0000H
	LCALL CONFIGURE_LCD
CYCLE:	CLR A
	R_D BIT P2.5
	W_R BIT P2.6
	INTER BIT P2.7
	MYDATA EQU P0

	SETB INTER
	MOV R1, #50H
	MOV R0, #68

BACK:	SETB INTER
	CLR W_R
	LCALL DELAYING
	SETB W_R

HERE:	JB INTER, HERE
	CLR R_D
	LCALL DELAYING
	MOV A, MYDATA
	LCALL PROCESS_DATA
	SETB R_D
	DJNZ R0, BACK

	MOV R0, #50H
	MOV R1, #68
	MOV R2, #00H

HADI:	CJNE @R0, #230, BAK
BAK:	JC BIDABAK
	INC R2

BIDABAK:INC R0
	DJNZ R1, HADI

	LCALL DELAYING
	LCALL CONFIGURE_LCD

	CJNE R2, #10, TEST
TEST:	JC UCGEN
	CJNE R2, #30, TESTBIDA
TESTBIDA:
	JC SINUS

	MOV A, #'S'
	LCALL SEND_DATA
	MOV A, #'q'
	LCALL SEND_DATA
	MOV A, #'u'
	LCALL SEND_DATA
	MOV A, #'a'
	LCALL SEND_DATA
	MOV A, #'r'
	LCALL SEND_DATA
	MOV A, #'e'
	LCALL SEND_DATA
	LJMP CYCLE

SINUS:	MOV A, #'S'
	LCALL SEND_DATA
	MOV A, #'i'
	LCALL SEND_DATA
	MOV A, #'n'
	LCALL SEND_DATA
	MOV A, #'e'
	LCALL SEND_DATA
;	MOV A, #'S'
;	LCALL SEND_DATA
;	MOV A, #'O'
;	LCALL SEND_DATA
;	MOV A, #'I'
;	LCALL SEND_DATA
;	MOV A, #'D'
;	LCALL SEND_DATA
;	MOV A, #'A'
;	LCALL SEND_DATA
;	MOV A, #'L'
;	LCALL SEND_DATA
	LJMP CYCLE

UCGEN:	MOV A, #'T'
	LCALL SEND_DATA
	MOV A, #'r'
	LCALL SEND_DATA
	MOV A, #'i'
	LCALL SEND_DATA
	MOV A, #'a'
	LCALL SEND_DATA
	MOV A, #'n'
	LCALL SEND_DATA
	MOV A, #'g'
	LCALL SEND_DATA
	MOV A, #'l'
	LCALL SEND_DATA
	MOV A, #'e'
	LCALL SEND_DATA
;	MOV A, #'A'
;	LCALL SEND_DATA
;	MOV A, #'R'
;	LCALL SEND_DATA
	LJMP CYCLE

PROCESS_DATA:
	MOV @R1, A
	INC R1
	RET

DELAYING:
	MOV R4, #80
CONT:	MOV R6, #5
CONT2:	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	NOP
	DJNZ R6, CONT2
	DJNZ R4, CONT
	RET
;BEQLE:	MOV	R7, #0FFH
;L1:	MOV	R6, #0FFH
;L2:	NOP
;	NOP
;	NOP
;	NOP
;	NOP
;	NOP
;	NOP
;	NOP
;	NOP
;	NOP
;	DJNZ	R6, L2
;	DJNZ	R7, L1
;	RET

CONFIGURE_LCD:			;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	MOV	A, #38H		;TWO LINES, 5X7 MATRIX
	ACALL	SEND_COMMAND
	MOV	A, #0FH		;DISPLAY ON, CURSOR BLINKING
	ACALL	SEND_COMMAND
	MOV	A, #06H		;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	ACALL	SEND_COMMAND
	MOV	A, #01H		;CLEAR DISPLAY SCREEN
	ACALL	SEND_COMMAND
	MOV	A, #80H		;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	ACALL	SEND_COMMAND
	RET

SEND_COMMAND:			;THIS  SUBROUTINE IS FOR SENDING THE COMMANDS TO LCD
	MOV	P1, A		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	CLR	P3.5		;RS=0 BEFORE SENDING COMMAND
	CLR	P3.6		;R/W=0 TO WRITE
	SETB	P3.7		;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	ACALL	DELAY
	CLR	P3.7
	RET


SEND_DATA:			;THIS  SUBROUTINE IS FOR SENDING THE DATA TO BE DISPLAYED
	MOV	P1, A		;SEND THE DATA STORED IN A TO LCD ; 1MC
	SETB	P3.5		;RS=1 BEFORE SENDING DATA ; 1MC
	CLR	P3.6		;R/W=0 TO WRITE ; 1MC
	SETB	P3.7		;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN ; 1MC
	ACALL	DELAY		; 2+ 6 MC
	CLR	P3.7		; 1MC 
	RET			; 2MC


DELAY:				;A SHORT DELAY SUBROUTINE
	PUSH	0		; 2 MC
	PUSH	1		; 2MC
	MOV	R0, #50		; 2MC
DELAY_OUTER_LOOP:
	MOV	R1, #255
	DJNZ	R1, $
	DJNZ	R0, DELAY_OUTER_LOOP
	POP	1
	POP	0
	RET

	END
